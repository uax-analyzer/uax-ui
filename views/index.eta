<% layout("./generaltemplate") %>

<%~ include("./sidebar", {sidebarOptions: [["overview", "APIs Overview"], ["metrics", "Metrics"]]}) %>

<% function rowDivision(keysChunks){ switch(keysChunks.length){ case 2: return 'w3-half' ; case 3: return 'w3-third' ;
    default: return '' ; } } %>

<!-- Main section -->
<div class="w3-main" style="margin-left:300px;margin-top:43px;padding-top:7px;">

  <div class="w3-row-padding w3-margin-bottom">
    <div id="overview">
      <div class="w3-container w3-white w3-text-grey w3-card-4 w3-padding-16 w3-round">
        <div class="w3-row">
          <% it.chunkOfKeys.forEach(function(chunk) { let chunkClass=rowDivision(chunk); chunk.forEach(function(key)
              {%>
          <div class="w3-container w3-center <%= chunkClass %>">
            <h3><b> <%= key %> </b></h3>
            <div id="overview-chart-<%= key %>"></div>
            <a class="w3-button w3-white w3-large" style="padding-top:0;" href="/<%= key %>">
              <b class="scores"><%= it.projectScores[key].toFixed(2) %> <i class="fa fa-external-link w3-tiny"></i></b>
            </a>
            <p style="margin-top: 0;">Overall score</p>
          </div>
          
          <% }); }); %>
        </div>
        <%~ include("./usabilityrange")%>
      </div>
    </div>


    <div class="w3-container w3-card w3-white w3-margin-top w3-padding-16 w3-round" id="metrics">
      <div class="w3-container">
        <h5 class="w3-opacity"><b> Metrics </b></h5>
        <div id="metrics-chart"></div>
      </div>
    </div>
  </div>

</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let options, chart;

    // inserts the overview charts
    <% Object.keys(it.resultsProject).forEach(projectKey => { %>
    options = {
      chart: {
        type: 'radar',
        height: '200px',
        parentHeightOffset: 0,
      },
      markers: {
        discrete: [<%= it.resultsProject[projectKey]
                .map(metricResult => metricResult.score || metricResult.usabilityResult.score).join(',') %>]
          .map((score, i) => {
            return {
              seriesIndex: 0,
              dataPointIndex: i,
              fillColor: colorScale[scoreRange(scaleToLikert(score))],
              strokeColor: colorScale[scoreRange(scaleToLikert(score))],
              size: 6,
              shape: "circle"
            };
          })
      },
      series: [{
        name: "<%= projectKey %>",
        data: [<%= it.resultsProject[projectKey]
                .map(metricResult => metricResult.score || metricResult.usabilityResult.score).join(',') %>]
      }],
      yaxis: {
        show: false
      },
      labels: [<% ~ "\'" + it.resultsProject[projectKey].map(metricResult => metricResult.metric).join("\',\'") + "\'" %>]
    };

    chart = new ApexCharts(document.getElementById("overview-chart-<%= projectKey %>"), options);

    chart.render();

    <%}); %>

    options = {
      chart: {
        type: 'bar',
        height: '350px',
        parentHeightOffset: 0,
        events: {
          dataPointSelection: (event, chartContext, config) => {
            // https://stackoverflow.com/questions/40752434/how-to-tell-between-undefined-array-elements-and-empty-slots
            let selected = config.selectedDataPoints;
            selected = selected.filter((_, i) => i in config.selectedDataPoints);

            //console.log(selected[0], config.seriesIndex);
            console.log(config.w.config.xaxis.categories[selected[0]],
              config.w.config.series[config.seriesIndex].name);
            window.location.href = `\/${config.w.config.series[config.seriesIndex].name}\#${config.w.config.xaxis.categories[selected[0]]}`;
          }
        }
      },
      series: [
        <% Object.keys(it.resultsProject).forEach(projectKey => { %> {
          name: '<%= projectKey %>',
          data: [
            <% it.resultsProject[projectKey].forEach(metricResult => { %> {
              x: '<%= metricResult.metric %>',
              y: <%= (metricResult.score || metricResult.usabilityResult.score) %>
            },
            <% });%>
          ]
        },
        <%}); %>
      ],
      yaxis: {
        show: false
      },
      xaxis: {
        categories: [<%~ Object.keys(it.resultsMetric).map( metricName => `\'${metricName}\'`).join(',') %>]
      },
      dataLabels: {
        enabled: false
      }
    }

    chart = new ApexCharts(document.getElementById("metrics-chart"), options);

    chart.render();

    // changes colors of the API scores in the main page
    let overallScores = document.querySelectorAll('.scores');
    for (let i = 0; i < overallScores.length; i++) {
      overallScores[i].style.color = colorScale[scoreRange(scaleToLikert(Number(overallScores[i].innerHTML)))];
    }

  });
</script>